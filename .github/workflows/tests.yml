name: Test

on: [push, pull_request]

jobs:

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}-${{hashFiles('**/requirements.txt')}}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        sudo apt-get install -y pandoc
        python -m pip install --upgrade pip
        python -m pip install .[docs]
        python -m pip install -r ./docs/doc-requirements.txt
    - name: Build docs
      run: |
        cd docs
        make html

  ui-test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 40
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-22.04]
        python: ["3.8", "3.9", "3.10", "3.11"]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install node
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'

    - name: Install Python ${{ matrix.python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}

    - name: Install Playwright
      run: |
          npm install -D @playwright/test
          npx playwright install

    - name: Install nbdime
      run: |
          pip install -e .[test]

    - name: Install jupyterlab and dependencies
      run: |
          python -m pip install --upgrade pip wheel setuptools
          python -m pip install jupyterlab~=4.0
    - name: Run playwright tests

      run: |
          cd ui-tests
          npx playwright test

    - name: Upload Playwright Test report
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: ui-tests-${{ matrix.os }}-python${{ matrix.python }}
        path: |
            ui-tests/playwright-report

  js:
    name: JavaScript
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}-${{hashFiles('**/requirements.txt')}}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install jupyterlab~=3.0
        npm install -g codecov

    - name: Use Node.js 18.x
      uses: actions/setup-node@v1
      with:
        node-version: 18.x
    - name: Get npm cache directory
      id: npm-cache-dir
      run: |
        echo "::set-output name=dir::$(npm config get cache)"
    - uses: actions/cache@v2
      id: npm-cache
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: install, build, test
      run: |
        python -m pip install --upgrade --upgrade-strategy=eager -e ".[test]"
        npm test
        codecov
      env:
        CI: true
  python:
    name: Python
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        os: [ubuntu-latest]
        include:
          - python-version: '3.11'
            jupyter_server-version: '<2'
          - python-version: '3.11'
            jupyter_server-version: '>=2'
          - python-version: '3.11'
            os: windows-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}-${{hashFiles('**/requirements.txt')}}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install jupyterlab~=3.0
        python -m pip install --upgrade --upgrade-strategy=eager ".[test]"
        python -m pip install jupyter_server${{ matrix.jupyter_server-version }}
    - name: Test with pytest (Linux)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        git config --global user.email CI@fake.com
        git config --global user.name "CI"
        tmpdir=$(mktemp -d)
        echo "TEST_TMPDIR=$tmpdir" >> $GITHUB_ENV
        pushd $tmpdir
        py.test -l --cov-report xml --cov=nbdime --pyargs nbdime
    - name: Test with pytest (Windows)
      if: startsWith(matrix.os, 'windows')
      run: |
        git config --global user.email CI@fake.com
        git config --global user.name "CI"
        $hgconfig = "[ui]`r`nusername = CI <CI@fake.com>"
        $hgconfig | Set-Content ($HOME + "\mercurial.ini")
        echo "TEST_TMPDIR=." >> $Env:GITHUB_ENV
        py.test -l --cov-report xml --cov=nbdime --pyargs nbdime
    - uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true
        directory: ${{ env.TEST_TMPDIR }}
